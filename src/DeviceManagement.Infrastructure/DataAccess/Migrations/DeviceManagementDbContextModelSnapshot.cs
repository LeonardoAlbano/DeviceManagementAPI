// <auto-generated />
using System;
using DeviceManagement.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeviceManagement.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(DeviceManagementDbContext))]
    partial class DeviceManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Customers_Email");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Customers_Status");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@example.com",
                            Name = "Example Company Ltd.",
                            Phone = "11999999999",
                            Status = true,
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IMEI")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(15)");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ActivationDate")
                        .HasDatabaseName("IX_Devices_ActivationDate");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Devices_CustomerId");

                    b.HasIndex("IMEI")
                        .IsUnique()
                        .HasDatabaseName("IX_Devices_IMEI");

                    b.HasIndex("Serial")
                        .IsUnique()
                        .HasDatabaseName("IX_Devices_Serial");

                    b.ToTable("Devices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            ActivationDate = new DateTime(2024, 5, 21, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            IMEI = "123456789012345",
                            Serial = "DEV001",
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EventDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("0=TurnedOn, 1=TurnedOff, 2=Movement, 3=SignalLoss");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_Events_DeviceId");

                    b.HasIndex("EventDateTime")
                        .HasDatabaseName("IX_Events_EventDateTime");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Events_Type");

                    b.HasIndex("DeviceId", "EventDateTime")
                        .HasDatabaseName("IX_Events_DeviceId_EventDateTime");

                    b.HasIndex("Type", "EventDateTime")
                        .HasDatabaseName("IX_Events_Type_EventDateTime");

                    b.ToTable("Events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444441"),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            DeviceId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EventDateTime = new DateTime(2024, 6, 20, 10, 0, 0, 0, DateTimeKind.Utc),
                            Observations = "Device turned on - Initial seed",
                            Type = 0,
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444442"),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            DeviceId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EventDateTime = new DateTime(2024, 6, 20, 11, 0, 0, 0, DateTimeKind.Utc),
                            Observations = "Movement detected - Initial seed",
                            Type = 2,
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444443"),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            DeviceId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EventDateTime = new DateTime(2024, 6, 20, 11, 30, 0, 0, DateTimeKind.Utc),
                            Observations = "Signal loss - Initial seed",
                            Type = 3,
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("User");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@devicemanagement.com",
                            IsActive = true,
                            Name = "Administrator",
                            PasswordHash = "4AaJ9AbWA1GYMhUSgRFxX6Npy7ig1OEcFvsRcy8YBkk=",
                            Role = "Admin",
                            Salt = "V8F+oh2ckfxVixGUeHyxtQ==",
                            UpdatedAt = new DateTime(2024, 6, 20, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Device", b =>
                {
                    b.HasOne("DeviceManagement.Domain.Entities.Customer", "Customer")
                        .WithMany("Devices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Devices_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Event", b =>
                {
                    b.HasOne("DeviceManagement.Domain.Entities.Device", "Device")
                        .WithMany("Events")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Events_Devices");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("DeviceManagement.Domain.Entities.Device", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
